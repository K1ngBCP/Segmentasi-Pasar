# -*- coding: utf-8 -*-
"""Segmentasi Pasar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jmz1nHGz1r_6ZTYfRyKhhIV7g_V9MkgT

# Pre Processing
"""

import pandas as pd
import matplotlib.pyplot as plt

# Membaca data dari database (gantilah 'data.csv' dengan nama file database Anda)
data = pd.read_csv('Data Dummy Transaksi BookGo di Indonesia.csv')
data

data.tail()

data.tail(5)

#Preprocessing Data 1
data['Biaya Partner'] = data['Biaya Partner'].str.replace('Rp', '').str.strip()
data['Biaya Layanan'] = data['Biaya Layanan'].str.replace('Rp', '').str.strip()
data['Biaya yang harus dibayar Customer'] = data['Biaya yang harus dibayar Customer'].str.replace('Rp', '').str.strip()

data['Biaya Partner'] = data['Biaya Partner'].str.replace(',', '').str.strip()
data['Biaya Layanan'] = data['Biaya Layanan'].str.replace(',', '').str.strip()
data['Biaya yang harus dibayar Customer'] = data['Biaya yang harus dibayar Customer'].str.replace(',', '').str.strip()

#Preprocessing Data 2
data['Biaya Partner'] = data['Biaya Partner'].apply(lambda x: float(str(x).replace('.00', '')))
data['Biaya Layanan'] = data['Biaya Layanan'].apply(lambda x: float(str(x).replace('.00', '')))
data['Biaya yang harus dibayar Customer'] = data['Biaya yang harus dibayar Customer'].apply(lambda x: float(str(x).replace('.00', '')))

#Preprocessing Data 3
data['Biaya Partner'] = data['Biaya Partner'].apply(lambda x: '{:.0f}'.format(x) if x.is_integer() else x)
data['Biaya Layanan'] = data['Biaya Layanan'].apply(lambda x: '{:.0f}'.format(x) if x.is_integer() else x)
data['Biaya yang harus dibayar Customer'] = data['Biaya yang harus dibayar Customer'].apply(lambda x: '{:.0f}'.format(x) if x.is_integer() else x)

#Preprocessing Data 4
data['Biaya yang harus dibayar Customer'] = data['Biaya yang harus dibayar Customer'].astype(float)
data['Biaya Layanan'] = data['Biaya Layanan'].astype(float)
data['Biaya Partner'] = data['Biaya Partner'].astype(float)
data['Biaya Tambahan'] = data['Biaya Tambahan'].astype(float)
data['Biaya Pokok'] = data['Biaya Pokok'].astype(float)

# Membuat visualisasi
segmentasi_produk = data['Jenis Produk'].value_counts().sort_index()
ax = segmentasi_produk.plot(kind='bar', color='skyblue')
plt.title('Segmentasi Pasar')
plt.xlabel('Jenis Produk')
plt.ylabel('Jumlah Pelanggan')

for i, v in enumerate(segmentasi_produk):
    ax.text(i, v + 1, str(v), ha='center', va='bottom')

unique_dates = data['Invoice Date'].unique()
print(unique_dates)

"""# Villa dan Appart"""

# Menghitung jumlah total dalam setiap kelompok
data2= data[data['Jenis Produk'] == 'Villas and Apartments']

data2['Jenis Produk'].count()
data2

Untung2 =data2['Biaya Layanan'].sum()
Untung2

bins = [0, 5, 12, 15, 18, 24, 60, 60]  # Anda dapat membiarkan 60 tetap di sini
labels = ['Balita', 'SD', 'SMP', 'SMA', 'Perguruan Tinggi', 'Dewasa']

data2['Segmen Umur'] = pd.cut(data2['Umur'], bins=bins, labels=labels, include_lowest=True, duplicates='drop')

# Membuat visualisasi
segmentasi_umur = data2['Segmen Umur'].value_counts().sort_index()
segmentasi_umur.plot(kind='bar', color='skyblue')
plt.title('Segmentasi Pasar berdasarkan Umur')
plt.xlabel('Segmen Umur')
plt.ylabel('Jumlah Pelanggan')

# Menambahkan label angka di atas batang diagram
for i in range(len(segmentasi_umur)):
    plt.annotate(str(segmentasi_umur[i]), xy=(i, segmentasi_umur[i]), ha='center', va='bottom')

# Menampilkan grafik
plt.show()

data2['Invoice Date'] = pd.to_datetime(data2['Invoice Date'], format='%d/%m/%Y')

# Mengelompokkan data berdasarkan tanggal harian
data2['Tanggal'] = data2['Invoice Date'].dt.to_period('D')
order_count_by_day = data2.groupby('Tanggal')['Invoice Date'].count().reset_index()
order_count_by_day.columns = ['Tanggal', 'Jumlah Pesanan']

# Konversi tanggal ke format string (misalnya 'YYYY-MM-DD') untuk digunakan sebagai label sumbu x
order_count_by_day['Tanggal'] = order_count_by_day['Tanggal'].dt.strftime('%Y-%m-%d')

plt.figure(figsize=(12, 6))
bars = plt.bar(order_count_by_day['Tanggal'], order_count_by_day['Jumlah Pesanan'], color='skyblue')
plt.title('Jumlah Pesanan per Hari')
plt.xlabel('Tanggal')
plt.ylabel('Jumlah Pesanan')
plt.xticks(rotation=45, ha='right')  # Atur rotasi dan penempatan label sumbu x
plt.grid(True)

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval , yval, ha='center', va='bottom')  # Atur penempatan teks

plt.show()

# Menghitung jumlah masing-masing rute
asal_counts2 = data2['Asal'].value_counts().reset_index()
asal_counts2.columns = ['Asal', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(asal_counts2)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(asal_counts2['Jumlah'], labels=asal_counts2['Asal'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Asal')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()

# Menghitung jumlah masing-masing rute
partner_counts2 = data2['Partner'].value_counts().reset_index()
partner_counts2.columns = ['Partner', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(partner_counts2)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(partner_counts2['Jumlah'], labels=partner_counts2['Partner'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Jumlah Partner')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()

"""# Bus and Shottle"""

# Menghitung jumlah total dalam setiap kelompok
data3= data[data['Jenis Produk'] == 'Bus and Shuttle']
data3

data3
data3['Jenis Produk'].count()

Untung3 =data3['Biaya Layanan'].sum()
Untung3

bins = [0, 5, 12, 15, 18, 24, 60, 60]  # Anda dapat membiarkan 60 tetap di sini
labels = ['Balita', 'SD', 'SMP', 'SMA', 'Perguruan Tinggi', 'Dewasa']

data3['Segmen Umur'] = pd.cut(data3['Umur'], bins=bins, labels=labels, include_lowest=True, duplicates='drop')

# Membuat visualisasi
segmentasi_umur3 = data3['Segmen Umur'].value_counts().sort_index()
segmentasi_umur3.plot(kind='bar', color='skyblue')
plt.title('Segmentasi Pasar berdasarkan Umur')
plt.xlabel('Segmen Umur')
plt.ylabel('Jumlah Pelanggan')

# Menambahkan label angka di atas batang diagram
for i in range(len(segmentasi_umur3)):
    plt.annotate(str(segmentasi_umur3[i]), xy=(i, segmentasi_umur3[i]), ha='center', va='bottom')

# Menampilkan grafik
plt.show()

data3.sort_values('Invoice Date')

data3['Invoice Date'] = pd.to_datetime(data3['Invoice Date'], format='%d/%m/%Y')

# Mengelompokkan data berdasarkan tanggal harian
data3['Tanggal'] = data3['Invoice Date'].dt.to_period('D')
order_count_by_day3 = data3.groupby('Tanggal')['Invoice Date'].count().reset_index()
order_count_by_day3.columns = ['Tanggal', 'Jumlah Pesanan']

# Konversi tanggal ke format string (misalnya 'YYYY-MM-DD') untuk digunakan sebagai label sumbu x
order_count_by_day3['Tanggal'] = order_count_by_day3['Tanggal'].dt.strftime('%Y-%m-%d')

plt.figure(figsize=(12, 6))
bars = plt.bar(order_count_by_day3['Tanggal'], order_count_by_day3['Jumlah Pesanan'], color='skyblue')
plt.title('Jumlah Pesanan per Hari')
plt.xlabel('Tanggal')
plt.ylabel('Jumlah Pesanan')
plt.xticks(rotation=45, ha='right')  # Atur rotasi dan penempatan label sumbu x
plt.grid(True)

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval , yval, ha='center', va='bottom')  # Atur penempatan teks

plt.show()

# Menggabungkan dua kolom menjadi satu kolom 'FullName'
data3['Rute'] = data3['Asal'] + '-' + data3['Tujuan']
data3['Rute']

# Menghitung jumlah masing-masing rute
rute_counts3 = data3['Rute'].value_counts().reset_index()
rute_counts3.columns = ['Rute', 'Jumlah']

# Membuat diagram batang
plt.figure(figsize=(10, 6))
plt.bar(rute_counts3['Rute'], rute_counts3['Jumlah'], color='skyblue')
plt.title('Jumlah Rute')
plt.xlabel('Rute')
plt.ylabel('Jumlah')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

# Menghitung jumlah masing-masing rute
rute_counts3 = data3['Rute'].value_counts().reset_index()
rute_counts3.columns = ['Rute', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(rute_counts3)

# Menghitung jumlah masing-masing rute
asal_counts3 = data3['Asal'].value_counts().reset_index()
asal_counts3.columns = ['Asal', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(asal_counts3)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(asal_counts3['Jumlah'], labels=asal_counts3['Asal'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Asal')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()

# Menghitung jumlah masing-masing rute
tujuan_counts3 = data3['Tujuan'].value_counts().reset_index()
tujuan_counts3.columns = ['Tujuan', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(tujuan_counts3)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(tujuan_counts3['Jumlah'], labels=tujuan_counts3['Tujuan'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Tujuan')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()

# Menghitung jumlah masing-masing rute
partner_counts3 = data3['Partner'].value_counts().reset_index()
partner_counts3.columns = ['Partner', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(partner_counts3)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(partner_counts3['Jumlah'], labels=partner_counts3['Partner'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Partner')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()

"""# Kereta"""

# Menghitung jumlah total dalam setiap kelompok
data4= data[data['Jenis Produk'] == 'Tiket Kereta']

data4
data4['Jenis Produk'].count()

Untung4 =data4['Biaya Layanan'].sum()
Untung4

bins = [0, 5, 12, 15, 18, 24, 60, 60]  # Anda dapat membiarkan 60 tetap di sini
labels = ['Balita', 'SD', 'SMP', 'SMA', 'Perguruan Tinggi', 'Dewasa']

data4['Segmen Umur'] = pd.cut(data4['Umur'], bins=bins, labels=labels, include_lowest=True, duplicates='drop')

# Membuat visualisasi
segmentasi_umur = data4['Segmen Umur'].value_counts().sort_index()
segmentasi_umur.plot(kind='bar', color='skyblue')
plt.title('Segmentasi Pasar berdasarkan Umur')
plt.xlabel('Segmen Umur')
plt.ylabel('Jumlah Pelanggan')

# Menambahkan label angka di atas batang diagram
for i in range(len(segmentasi_umur)):
    plt.annotate(str(segmentasi_umur[i]), xy=(i, segmentasi_umur[i]), ha='center', va='bottom')

# Menampilkan grafik
plt.show()

data4.sort_values('Invoice Date')

data4['Invoice Date'] = pd.to_datetime(data4['Invoice Date'], format='%d/%m/%Y')

# Mengelompokkan data berdasarkan tanggal harian
data4['Tanggal'] = data4['Invoice Date'].dt.to_period('D')
order_count_by_day4 = data4.groupby('Tanggal')['Invoice Date'].count().reset_index()
order_count_by_day4.columns = ['Tanggal', 'Jumlah Pesanan']

# Konversi tanggal ke format string (misalnya 'YYYY-MM-DD') untuk digunakan sebagai label sumbu x
order_count_by_day4['Tanggal'] = order_count_by_day4['Tanggal'].dt.strftime('%Y-%m-%d')

plt.figure(figsize=(12, 6))
bars = plt.bar(order_count_by_day4['Tanggal'], order_count_by_day4['Jumlah Pesanan'], color='skyblue')
plt.title('Jumlah Pesanan per Hari')
plt.xlabel('Tanggal')
plt.ylabel('Jumlah Pesanan')
plt.xticks(rotation=45, ha='right')  # Atur rotasi dan penempatan label sumbu x
plt.grid(True)

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval , yval, ha='center', va='bottom')  # Atur penempatan teks

plt.show()

# Menggabungkan dua kolom menjadi satu kolom 'FullName'
data4['Rute'] = data4['Asal'] + '-' + data4['Tujuan']
data4['Rute']

# Menghitung jumlah masing-masing rute
rute_counts4 = data4['Rute'].value_counts().reset_index()
rute_counts4.columns = ['Rute', 'Jumlah']

# Membuat diagram batang
plt.figure(figsize=(10, 6))
plt.bar(rute_counts4['Rute'], rute_counts4['Jumlah'], color='skyblue')
plt.title('Jumlah Rute')
plt.xlabel('Rute')
plt.ylabel('Jumlah')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

# Menghitung jumlah masing-masing rute
rute_counts4 = data4['Rute'].value_counts().reset_index()
rute_counts4.columns = ['Rute', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(rute_counts4)

# Menghitung jumlah masing-masing rute
asal_counts4 = data4['Asal'].value_counts().reset_index()
asal_counts4.columns = ['Asal', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(asal_counts4)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(asal_counts4['Jumlah'], labels=asal_counts4['Asal'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Asal')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()

# Menghitung jumlah masing-masing rute
tujuan_counts4 = data4['Tujuan'].value_counts().reset_index()
tujuan_counts4.columns = ['Tujuan', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(tujuan_counts4)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(tujuan_counts4['Jumlah'], labels=tujuan_counts4['Tujuan'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Tujuan')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()

# Menghitung jumlah masing-masing rute
partner_counts4 = data4['Partner'].value_counts().reset_index()
partner_counts4.columns = ['Partner', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(partner_counts4)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(partner_counts4['Jumlah'], labels=partner_counts4['Partner'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Asal')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()

"""# Tiket Penerbangan"""

# Menghitung jumlah total dalam setiap kelompok
data5= data[data['Jenis Produk'] == 'Tiket Penerbangan Pesawat']

data5['Jenis Produk'].count()
data5

Untung5 =data5['Biaya Layanan'].sum()
Untung5

bins = [0, 5, 12, 15, 18, 24, 60, 60]  # Anda dapat membiarkan 60 tetap di sini
labels = ['Balita', 'SD', 'SMP', 'SMA', 'Perguruan Tinggi', 'Dewasa']

data5['Segmen Umur'] = pd.cut(data5['Umur'], bins=bins, labels=labels, include_lowest=True, duplicates='drop')

# Membuat visualisasi
segmentasi_umur = data5['Segmen Umur'].value_counts().sort_index()
segmentasi_umur.plot(kind='bar', color='skyblue')
plt.title('Segmentasi Pasar berdasarkan Umur')
plt.xlabel('Segmen Umur')
plt.ylabel('Jumlah Pelanggan')

# Menambahkan label angka di atas batang diagram
for i in range(len(segmentasi_umur)):
    plt.annotate(str(segmentasi_umur[i]), xy=(i, segmentasi_umur[i]), ha='center', va='bottom')

# Menampilkan grafik
plt.show()

data5.sort_values('Invoice Date')

data5['Invoice Date'] = pd.to_datetime(data5['Invoice Date'], format='%d/%m/%Y')

# Mengelompokkan data berdasarkan tanggal harian
data5['Tanggal'] = data5['Invoice Date'].dt.to_period('D')
order_count_by_day5 = data5.groupby('Tanggal')['Invoice Date'].count().reset_index()
order_count_by_day5.columns = ['Tanggal', 'Jumlah Pesanan']

# Konversi tanggal ke format string (misalnya 'YYYY-MM-DD') untuk digunakan sebagai label sumbu x
order_count_by_day5['Tanggal'] = order_count_by_day5['Tanggal'].dt.strftime('%Y-%m-%d')

plt.figure(figsize=(12, 6))
bars = plt.bar(order_count_by_day5['Tanggal'], order_count_by_day5['Jumlah Pesanan'], color='skyblue')
plt.title('Jumlah Pesanan per Hari')
plt.xlabel('Tanggal')
plt.ylabel('Jumlah Pesanan')
plt.xticks(rotation=45, ha='right')  # Atur rotasi dan penempatan label sumbu x
plt.grid(True)

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval , yval, ha='center', va='bottom')  # Atur penempatan teks

plt.show()

# Menggabungkan dua kolom menjadi satu kolom 'FullName'
data5['Rute'] = data5['Asal'] + '-' + data5['Tujuan']
data5['Rute']

# Menghitung jumlah masing-masing rute
rute_counts5 = data5['Rute'].value_counts().reset_index()
rute_counts5.columns = ['Rute', 'Jumlah']

# Membuat diagram batang
plt.figure(figsize=(10, 6))
plt.bar(rute_counts5['Rute'], rute_counts5['Jumlah'], color='skyblue')
plt.title('Jumlah Rute')
plt.xlabel('Rute')
plt.ylabel('Jumlah')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

# Menghitung jumlah masing-masing rute
rute_counts5 = data5['Rute'].value_counts().reset_index()
rute_counts5.columns = ['Rute', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(rute_counts5)

# Menghitung jumlah masing-masing rute
asal_counts5 = data5['Asal'].value_counts().reset_index()
asal_counts5.columns = ['Asal', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(asal_counts5)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(asal_counts5['Jumlah'], labels=asal_counts5['Asal'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Asal')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()

# Menghitung jumlah masing-masing rute
tujuan_counts5 = data5['Tujuan'].value_counts().reset_index()
tujuan_counts5.columns = ['Tujuan', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(tujuan_counts5)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(tujuan_counts5['Jumlah'], labels=tujuan_counts5['Tujuan'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Tujuan')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()

# Menghitung jumlah masing-masing rute
partner_counts5 = data5['Partner'].value_counts().reset_index()
partner_counts5.columns = ['Partner', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(partner_counts5)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(partner_counts5['Jumlah'], labels=partner_counts5['Partner'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Partner')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()

"""# Total"""

data = {'Kategori': ['Penerbangan', 'Kereta', 'Bus', 'Villa'],
        'Jumlah': [Untung5, Untung4, Untung3, Untung2]}
df = pd.DataFrame(data)

plt.figure(figsize=(8, 8))  # Atur ukuran diagram lingkaran

# Buat diagram lingkaran
plt.pie(df['Jumlah'], labels=df['Kategori'], autopct='%1.1f%%', startangle=140)

# Tambahkan judul
plt.title('Diagram Lingkaran Contoh')

# Tampilkan diagram lingkaran
plt.axis('equal')  # Untuk memastikan diagram lingkaran berbentuk lingkaran, bukan elips

# Tambahkan nilai keuntungan di samping persentase
for i, (kategori, jumlah) in enumerate(zip(df['Kategori'], df['Jumlah'])):
    plt.text(1.2, -0.15 - 0.1 * i, f'{kategori}: RP{jumlah}', fontsize=12)

plt.show()

bins = [0, 5, 12, 15, 18, 24, 60, 60]  # Anda dapat membiarkan 60 tetap di sini
labels = ['Balita', 'SD', 'SMP', 'SMA', 'Perguruan Tinggi', 'Dewasa']

data['Segmen Umur'] = pd.cut(data['Umur'], bins=bins, labels=labels, include_lowest=True, duplicates='drop')

# Membuat visualisasi
segmentasi_umur = data['Segmen Umur'].value_counts().sort_index()
segmentasi_umur.plot(kind='bar', color='skyblue')
plt.title('Segmentasi Pasar berdasarkan Umur')
plt.xlabel('Segmen Umur')
plt.ylabel('Jumlah Pelanggan')

# Menambahkan label angka di atas batang diagram
for i in range(len(segmentasi_umur)):
    plt.annotate(str(segmentasi_umur[i]), xy=(i, segmentasi_umur[i]), ha='center', va='bottom')

# Menampilkan grafik
plt.show()

data['Invoice Date'] = pd.to_datetime(data['Invoice Date'], format='%d/%m/%Y')

# Mengelompokkan data berdasarkan tanggal harian
data['Tanggal'] = data['Invoice Date'].dt.to_period('D')
order_count_by_day = data.groupby('Tanggal')['Invoice Date'].count().reset_index()
order_count_by_day.columns = ['Tanggal', 'Jumlah Pesanan']

# Konversi tanggal ke format string (misalnya 'YYYY-MM-DD') untuk digunakan sebagai label sumbu x
order_count_by_day['Tanggal'] = order_count_by_day['Tanggal'].dt.strftime('%Y-%m-%d')

plt.figure(figsize=(12, 6))
bars = plt.bar(order_count_by_day['Tanggal'], order_count_by_day['Jumlah Pesanan'], color='skyblue')
plt.title('Jumlah Pesanan per Hari')
plt.xlabel('Tanggal')
plt.ylabel('Jumlah Pesanan')
plt.xticks(rotation=45, ha='right')  # Atur rotasi dan penempatan label sumbu x
plt.grid(True)

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval , yval, ha='center', va='bottom')  # Atur penempatan teks

plt.show()

# Menghitung jumlah masing-masing rute
asal_counts = data['Asal'].value_counts().reset_index()
asal_counts.columns = ['Asal', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(asal_counts)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(asal_counts['Jumlah'], labels=asal_counts['Asal'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Asal')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()

# Menghitung jumlah masing-masing rute
partner_counts = data['Partner'].value_counts().reset_index()
partner_counts.columns = ['Partner', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(partner_counts)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(partner_counts['Jumlah'], labels=partner_counts['Partner'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Asal')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()



# Menghitung jumlah masing-masing rute
tujuan_counts = data['Tujuan'].value_counts().reset_index()
tujuan_counts.columns = ['Tujuan', 'Jumlah']

# Menampilkan daftar rute dan jumlahnya
print(tujuan_counts)

# Membuat diagram donat
plt.figure(figsize=(8, 8))
plt.pie(tujuan_counts['Jumlah'], labels=tujuan_counts['Tujuan'], autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'white'})
plt.title('Diagram Donat Tujuan')
plt.axis('equal')  # Agar diagram donat terlihat seperti lingkaran
plt.show()